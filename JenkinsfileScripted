@Library('slack-notifier') _

node {
    withCredentials([string(credentialsId: 'slack-hook', variable: 'SLACK_HOOK')]) {
        try {

            stage('Checkout') {
                checkout scm
                echo sh(script: 'env', returnStdout: true)
            }

            stage('Configure'){
                env.PATH = "${tool 'Maven 3.3.9'}/bin:${env.PATH}"
            }

            stage('test') {
                sh 'mvn test -Dmaven.test.failure.ignore=true'
            }

            stage ('notify') {
                junit testResults: 'target/surefire-reports/*.xml', allowEmptyResults: true
                archiveArtifacts 'target/surefire-reports/**'
                resultNotifier.populateGlobalVariables(this)
                def attachments = resultNotifier.generateTestResultAttachment(this)

                def imageAttachments = attachments.get(0)
                imageAttachments.put('thumb_url', "https://raw.githubusercontent.com/hjnilsson/country-flags/master/png100px/ar.png")
                attachments.set(0, imageAttachments)

                resultNotifier.notifySlack("", "jenkins-builds", attachments, "${SLACK_HOOK}")
            }

        } catch (exception) {
                resultNotifier.populateGlobalVariables(this)
                def attachments = resultNotifier.generateErrorMessage(this, exception)
                
                def imageAttachments = attachments.get(0)
                imageAttachments.put('thumb_url', "https://raw.githubusercontent.com/hjnilsson/country-flags/master/png100px/ar.png")
                attachments.set(0, imageAttachments)

                resultNotifier.notifySlack("", "jenkins-builds", attachments, "${SLACK_HOOK}")
                // Throw exception to break the build
                throw exception
        }
    }
}
